name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - name: Instantiate
        run: |
          julia --project -e 'using Pkg; Pkg.instantiate()'
      - name: Run tests with coverage
        run: |
          julia --project -e 'using Pkg; Pkg.test(coverage=true)'
      - name: Process coverage
        uses: julia-actions/julia-processcoverage@v1
        with:
          directories: src
          lcov: true
      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          flags: unittests
          fail_ci_if_error: false

  mpi-test:
    runs-on: ubuntu-latest
    env:
      JULIA_MPI_BINARY: artifacts
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - name: Instantiate
        run: |
          julia --project -e 'using Pkg; Pkg.instantiate()'
      - name: Build MPI.jl against system MPI
        run: |
          julia --project -e '
            using Pkg; Pkg.build("MPI");
            using MPI;
            try
              MPI.Init()
              println("MPI library version: ", MPI.Get_library_version())
            finally
              MPI.Finalize()
            end
          '
      - name: Install mpiexecjl wrapper
        run: |
          julia --project -e '
            using MPI
            MPI.install_mpiexecjl()
            println("Installed mpiexecjl in ", joinpath(homedir(), ".julia", "bin"))
          '
      - name: Run MPI sanity test (2 ranks)
        run: |
          ~/.julia/bin/mpiexecjl -n 2 julia --project test/mpi_sanity.jl
